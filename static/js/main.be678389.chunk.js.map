{"version":3,"sources":["App.js","index.js"],"names":["randBetween","min","max","Math","floor","random","randColour","r","g","b","THREE","App","props","ref","React","createRef","color","geometry","material","opacity","side","transparent","cube","position","x","y","this","scene","add","camera","z","rotation","animate","requestAnimationFrame","renderer","render","window","innerWidth","innerHeight","setSize","appendChild","domElement","hLight","dLight","set","target","numCubes","renderCube","PureComponent","ReactDOM","document","getElementById"],"mappings":"kMAIMA,G,MAAc,SAACC,EAAKC,GACxB,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAM,EAAID,IAAQA,IAGjDK,EAAa,WACjB,IAAMC,EAAIP,EAAY,EAAG,KACnBQ,EAAIR,EAAY,EAAG,KACnBS,EAAIT,EAAY,EAAG,KACzB,OAAO,IAAIU,IAAJ,cAAuBH,EAAvB,aAA6BC,EAA7B,aAAmCC,EAAnC,OA4EME,E,kDAvEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,IAAMC,IAAMC,YAFA,E,uDAKRC,GAAQ,IAAD,OAEVC,EAAW,IAAIP,IAEfQ,EAAW,IAAIR,IAAwB,CAC3CM,MAAO,IAAIN,IAAYM,GAASV,KAChCa,QAAS,GACTC,KAAMV,IACNW,aAAa,IAGTC,EAAO,IAAIZ,IAAWO,EAAUC,GACtCI,EAAKC,SAASC,EAAIxB,GAAa,EAAG,GAClCsB,EAAKC,SAASE,EAAIzB,GAAa,EAAG,GAClC0B,KAAKC,MAAMC,IAAIN,GACfI,KAAKG,OAAON,SAASO,EAAI,EAEzBR,EAAKS,SAASP,GAAKrB,KAAKE,SACxBiB,EAAKS,SAASN,GAAKtB,KAAKE,UAGR,SAAV2B,IACJC,sBAAsBD,GACtBV,EAAKS,SAASP,GAAK,IACnBF,EAAKS,SAASN,GAAK,IACnB,EAAKS,SAASC,OAAO,EAAKR,MAAO,EAAKE,QAExCG,K,0CAKAN,KAAKC,MAAQ,IAAIjB,IACjBgB,KAAKG,OAAS,IAAInB,IAAwB,GAAI0B,OAAOC,WAAaD,OAAOE,YAAa,GAAK,KAC3FZ,KAAKQ,SAAW,IAAIxB,IACpBgB,KAAKQ,SAASK,QAAQH,OAAOC,WAAa,GAAID,OAAOE,YAAc,IACnEZ,KAAKb,IAAI2B,YAAYd,KAAKQ,SAASO,YAGnC,IAGMC,EAAS,IAAIhC,IAHF,SACI,SACH,GAElBgB,KAAKC,MAAMC,IAAIc,GAEf,IACMC,EAAS,IAAIjC,IADL,SAJI,GAMlBiC,EAAOpB,SAASqB,IAAI,EAAG,GAAI,GAC3BD,EAAOE,OAAOtB,SAASqB,KAAK,EAAG,EAAG,GAClClB,KAAKC,MAAMC,IAAIe,GACfjB,KAAKC,MAAMC,IAAIe,EAAOE,QAItB,IADA,IAAIC,EAAW,EACRA,KACLpB,KAAKqB,e,+BAIC,IAAD,OACP,OACE,yBAAKlC,IAAK,SAAAA,GAAG,OAAI,EAAKA,IAAMA,S,GApEhBmC,iBCXlBC,IAASd,OAAO,kBAAC,EAAD,MAASe,SAASC,eAAe,U","file":"static/js/main.be678389.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport * as THREE from \"three\";\nimport './App.css';\n\nconst randBetween = (min, max) => {\n  return Math.floor(Math.random() * (max + 1 - min)) + min;\n}\n\nconst randColour = () => {\n  const r = randBetween(0, 255);\n  const g = randBetween(0, 255);\n  const b = randBetween(0, 255);\n  return new THREE.Color(`rgb(${r}, ${g}, ${b})`);\n}\n\nclass App extends PureComponent {\n\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n  }\n\n  renderCube(color) {\n\n    const geometry = new THREE.BoxGeometry();\n\n    const material = new THREE.MeshPhongMaterial({\n      color: new THREE.Color(color || randColour()),\n      opacity: 0.5,\n      side: THREE.DoubleSide,\n      transparent: true\n    });\n\n    const cube = new THREE.Mesh(geometry, material);\n    cube.position.x = randBetween(-5, 5);\n    cube.position.y = randBetween(-5, 5);\n    this.scene.add(cube);\n    this.camera.position.z = 7;\n    // Start off at a random rotation\n    cube.rotation.x += Math.random();\n    cube.rotation.y += Math.random();\n    // Animate rotation\n    //console.log(animationSpeed, color);\n    const animate = () => {\n      requestAnimationFrame(animate);\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      this.renderer.render(this.scene, this.camera);\n    };\n    animate();\n  }\n\n  componentDidMount() {\n    // Create basic scene\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(window.innerWidth - 10, window.innerHeight - 10);\n    this.ref.appendChild(this.renderer.domElement);\n\n    // Add lighting\n    const skyColor = 0xB1E1FF;\n    const groundColour = 0xB97A20;\n    const intensity = 1;\n    const hLight = new THREE.HemisphereLight(skyColor, groundColour, intensity);\n    this.scene.add(hLight);\n\n    const color = 0xFFFFFF;\n    const dLight = new THREE.DirectionalLight(color, intensity);\n    dLight.position.set(0, 10, 0);\n    dLight.target.position.set(-5, 0, 0);\n    this.scene.add(dLight);\n    this.scene.add(dLight.target);\n\n    // Render some cubes\n    let numCubes = 7;\n    while (numCubes--) {\n      this.renderCube();\n    }\n  }\n\n  render() {\n    return (\n      <div ref={ref => this.ref = ref}></div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}