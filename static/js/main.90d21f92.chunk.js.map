{"version":3,"sources":["App.js","index.js"],"names":["randBetween","min","max","Math","floor","random","randColour","r","g","b","THREE","App","props","ref","React","createRef","numCubes","animations","color","this","geometry","material","opacity","side","transparent","cube","position","x","y","rotation","click","visible","Infinity","scene","add","factor","push","camera","window","innerWidth","innerHeight","renderer","setSize","appendChild","domElement","hLight","dLight","set","target","z","addCube","animate","forEach","anim","render","requestAnimationFrame","raycaster","mouse","addEventListener","event","preventDefault","clientX","clientWidth","clientY","clientHeight","setFromCamera","intersects","intersectObjects","children","length","object","PureComponent","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.90d21f92.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport * as THREE from \"three\";\nimport './App.css';\n\nconst randBetween = (min, max) => {\n  return Math.floor(Math.random() * (max + 1 - min)) + min;\n}\n\nconst randColour = () => {\n  const r = randBetween(50, 200);\n  const g = randBetween(50, 200);\n  const b = randBetween(50, 200);\n  return new THREE.Color(`rgb(${r}, ${g}, ${b})`);\n}\n\nclass App extends PureComponent {\n\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n    this.numCubes = 0;\n    this.animations = [];\n  }\n\n  addCube(color) {\n    this.numCubes++;\n\n    // Cube shape\n    const geometry = new THREE.BoxGeometry();\n\n    // Colour\n    const material = new THREE.MeshPhongMaterial({\n      color: new THREE.Color(color || randColour()),\n      opacity: 0.5,\n      side: THREE.DoubleSide,\n      transparent: true\n    });\n\n    // Start off at a random rotation and position\n    const cube = new THREE.Mesh(geometry, material);\n    cube.position.x = randBetween(-5, 5) + Math.random();\n    cube.position.y = randBetween(-8, -5);\n    cube.rotation.x = Math.random();\n    cube.rotation.y = Math.random();\n\n    cube.click = () => {\n      material.visible = false;\n      cube.position.y = Infinity;\n    };\n\n    this.scene.add(cube);\n\n    // Each cube has its own speed\n    const factor = Math.random() * (0.02) + 0.01;\n\n    // Animate the cube\n    this.animations.push(() => {\n      // Rotate\n      cube.rotation.x -= 0.01;\n      cube.rotation.y += 0.01;\n\n      // Drift upwards, wrapping to bottom when reach top\n      cube.position.y += factor;\n      if (cube.position.y > 6) {\n        material.visible = true;\n        material.color = randColour();\n        cube.position.y = -6;\n        cube.position.x = randBetween(-5, 5) + Math.random();\n      }\n    });\n  }\n\n  componentDidMount() {\n    // Create basic scene\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(window.innerWidth - 10, window.innerHeight - 10);\n    this.ref.appendChild(this.renderer.domElement);\n\n    // Add lighting\n    const skyColor = 0xFFFFFF;\n    const groundColour = 0x000000;\n    const intensity = 1;\n    const hLight = new THREE.HemisphereLight(skyColor, groundColour, intensity);\n    this.scene.add(hLight);\n\n    const color = 0xFFFFFF;\n    const dLight = new THREE.DirectionalLight(color, intensity);\n    dLight.position.set(0, 10, 0);\n    dLight.target.position.set(-5, 0, 0);\n    this.scene.add(dLight);\n    this.scene.add(dLight.target);\n    this.camera.position.z = 7;\n\n    // Maybe animate light here?\n\n    // Render some cubes\n    let numCubes = 50;\n    while (numCubes--) {\n      this.addCube();\n    }\n\n    // Start animating and rendering.\n    const animate = () => {\n      this.animations.forEach(anim => anim());\n      // Now there's only 1 render no matter how many things are being animated\n      this.renderer.render(this.scene, this.camera);\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Start listening for clicks\n    const raycaster = new THREE.Raycaster();\n    const mouse = new THREE.Vector2();\n\n    this.ref.addEventListener('mousedown', (event) => {\n\n      event.preventDefault();\n\n      mouse.x = (event.clientX / this.renderer.domElement.clientWidth) * 2 - 1;\n      mouse.y = - (event.clientY / this.renderer.domElement.clientHeight) * 2 + 1;\n\n      raycaster.setFromCamera(mouse, this.camera);\n\n      const intersects = raycaster.intersectObjects(this.scene.children);\n\n      // run click on all\n      //intersects.filter(inter => 'click' in inter.object).forEach(inter => inter.object.click());\n\n      // run click just on the foremost \n      if (intersects.length > 0) {\n        if (intersects[0].object.click) {\n          intersects[0].object.click();\n        }\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div ref={ref => this.ref = ref}></div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}