{"version":3,"sources":["App.js","index.js"],"names":["randBetween","min","max","Math","floor","random","randColour","r","g","b","THREE","App","props","ref","React","createRef","numCubes","color","this","geometry","material","opacity","side","transparent","cube","position","x","y","click","visible","setTimeout","renderCube","bind","scene","add","factor","animate","requestAnimationFrame","rotation","renderer","render","camera","window","innerWidth","innerHeight","setSize","appendChild","domElement","hLight","dLight","set","target","z","raycaster","mouse","addEventListener","event","preventDefault","clientX","clientWidth","clientY","clientHeight","setFromCamera","intersects","intersectObjects","children","length","object","PureComponent","ReactDOM","document","getElementById"],"mappings":"kMAIMA,G,MAAc,SAACC,EAAKC,GACxB,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAM,EAAID,IAAQA,IAGjDK,EAAa,WACjB,IAAMC,EAAIP,EAAY,GAAI,KACpBQ,EAAIR,EAAY,GAAI,KACpBS,EAAIT,EAAY,GAAI,KAC1B,OAAO,IAAIU,IAAJ,cAAuBH,EAAvB,aAA6BC,EAA7B,aAAmCC,EAAnC,OA8HME,E,kDAzHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,IAAMC,IAAMC,YACjB,EAAKC,SAAW,EAHC,E,uDAMRC,GAAQ,IAAD,OAChBC,KAAKF,WAGL,IAAMG,EAAW,IAAIT,IAGfU,EAAW,IAAIV,IAAwB,CAC3CO,MAAO,IAAIP,IAAYO,GAASX,KAChCe,QAAS,GACTC,KAAMZ,IACNa,aAAa,IAITC,EAAO,IAAId,IAAWS,EAAUC,GACtCI,EAAKC,SAASC,EAAI1B,GAAa,EAAG,GAAKG,KAAKE,SAC5CmB,EAAKC,SAASE,EAAI3B,GAAa,GAAI,GAEnCwB,EAAKI,MAAQ,WACXR,EAASS,SAAU,EACf,EAAKb,SAAW,IAClBc,WAAW,EAAKC,WAAWC,KAAK,GAAOhC,EAAY,IAAM,OAI7DkB,KAAKe,MAAMC,IAAIV,GAGf,IAAMW,EAA0B,IAAjBhC,KAAKE,SAAoB,KAGxB,SAAV+B,IACJC,sBAAsBD,GAGtBZ,EAAKc,SAASZ,GAAK,IACnBF,EAAKc,SAASX,GAAK,IAGnBH,EAAKC,SAASE,GAAKQ,EACfX,EAAKC,SAASE,EAAI,IACpBP,EAASS,SAAU,EACnBT,EAASH,MAAQX,IACjBkB,EAAKC,SAASE,GAAK,GAGrB,EAAKY,SAASC,OAAO,EAAKP,MAAO,EAAKQ,QAExCL,K,0CAGmB,IAAD,OAElBlB,KAAKe,MAAQ,IAAIvB,IACjBQ,KAAKuB,OAAS,IAAI/B,IAAwB,GAAIgC,OAAOC,WAAaD,OAAOE,YAAa,GAAK,KAC3F1B,KAAKqB,SAAW,IAAI7B,IACpBQ,KAAKqB,SAASM,QAAQH,OAAOC,WAAa,GAAID,OAAOE,YAAc,IACnE1B,KAAKL,IAAIiC,YAAY5B,KAAKqB,SAASQ,YAGnC,IAGMC,EAAS,IAAItC,IAHF,SACI,EACH,GAElBQ,KAAKe,MAAMC,IAAIc,GAEf,IACMC,EAAS,IAAIvC,IADL,SAJI,GAMlBuC,EAAOxB,SAASyB,IAAI,EAAG,GAAI,GAC3BD,EAAOE,OAAO1B,SAASyB,KAAK,EAAG,EAAG,GAClChC,KAAKe,MAAMC,IAAIe,GACf/B,KAAKe,MAAMC,IAAIe,EAAOE,QACtBjC,KAAKuB,OAAOhB,SAAS2B,EAAI,EAIzB,IADA,IAAIpC,EAAW,EACRA,KACLE,KAAKa,aAIP,IAAMsB,EAAY,IAAI3C,IAChB4C,EAAQ,IAAI5C,IAElBQ,KAAKL,IAAI0C,iBAAiB,aAAa,SAACC,GAEtCA,EAAMC,iBAENH,EAAM5B,EAAK8B,EAAME,QAAU,EAAKnB,SAASQ,WAAWY,YAAe,EAAI,EACvEL,EAAM3B,GAAO6B,EAAMI,QAAU,EAAKrB,SAASQ,WAAWc,aAAgB,EAAI,EAE1ER,EAAUS,cAAcR,EAAO,EAAKb,QAEpC,IAAMsB,EAAaV,EAAUW,iBAAiB,EAAK/B,MAAMgC,UAMrDF,EAAWG,OAAS,GAClBH,EAAW,GAAGI,OAAOvC,OACvBmC,EAAW,GAAGI,OAAOvC,a,+BAMnB,IAAD,OACP,OACE,yBAAKf,IAAK,SAAAA,GAAG,OAAI,EAAKA,IAAMA,S,GAtHhBuD,iBCXlBC,IAAS7B,OAAO,kBAAC,EAAD,MAAS8B,SAASC,eAAe,U","file":"static/js/main.523b5387.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport * as THREE from \"three\";\nimport './App.css';\n\nconst randBetween = (min, max) => {\n  return Math.floor(Math.random() * (max + 1 - min)) + min;\n}\n\nconst randColour = () => {\n  const r = randBetween(50, 200);\n  const g = randBetween(50, 200);\n  const b = randBetween(50, 200);\n  return new THREE.Color(`rgb(${r}, ${g}, ${b})`);\n}\n\nclass App extends PureComponent {\n\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n    this.numCubes = 0;\n  }\n\n  renderCube(color) {\n    this.numCubes++;\n\n    // Cube shape\n    const geometry = new THREE.BoxGeometry();\n\n    // Colour\n    const material = new THREE.MeshPhongMaterial({\n      color: new THREE.Color(color || randColour()),\n      opacity: 0.5,\n      side: THREE.DoubleSide,\n      transparent: true\n    });\n\n    // Start off at a random rotation and position\n    const cube = new THREE.Mesh(geometry, material);\n    cube.position.x = randBetween(-5, 5) + Math.random();\n    cube.position.y = randBetween(-8, -5);\n\n    cube.click = () => {\n      material.visible = false;\n      if (this.numCubes < 10) {\n        setTimeout(this.renderCube.bind(this), randBetween(1000, 3000));\n      }\n    };\n\n    this.scene.add(cube);\n\n    // Each cube has its own speed\n    const factor = Math.random() * (0.02) + 0.01;\n\n    // Animate the cube\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      // Rotate\n      cube.rotation.x -= 0.01;\n      cube.rotation.y += 0.01;\n\n      // Drift upwards, wrapping to bottom when reach top\n      cube.position.y += factor;\n      if (cube.position.y > 6) {\n        material.visible = true;\n        material.color = randColour();\n        cube.position.y = -6;\n      }\n\n      this.renderer.render(this.scene, this.camera);\n    };\n    animate();\n  }\n\n  componentDidMount() {\n    // Create basic scene\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(window.innerWidth - 10, window.innerHeight - 10);\n    this.ref.appendChild(this.renderer.domElement);\n\n    // Add lighting\n    const skyColor = 0xFFFFFF;\n    const groundColour = 0x000000;\n    const intensity = 1;\n    const hLight = new THREE.HemisphereLight(skyColor, groundColour, intensity);\n    this.scene.add(hLight);\n\n    const color = 0xFFFFFF;\n    const dLight = new THREE.DirectionalLight(color, intensity);\n    dLight.position.set(0, 10, 0);\n    dLight.target.position.set(-5, 0, 0);\n    this.scene.add(dLight);\n    this.scene.add(dLight.target);\n    this.camera.position.z = 7;\n\n    // Render some cubes\n    let numCubes = 7;\n    while (numCubes--) {\n      this.renderCube();\n    }\n\n    // Start listening for clicks\n    const raycaster = new THREE.Raycaster();\n    const mouse = new THREE.Vector2();\n\n    this.ref.addEventListener('mousedown', (event) => {\n\n      event.preventDefault();\n\n      mouse.x = (event.clientX / this.renderer.domElement.clientWidth) * 2 - 1;\n      mouse.y = - (event.clientY / this.renderer.domElement.clientHeight) * 2 + 1;\n\n      raycaster.setFromCamera(mouse, this.camera);\n\n      const intersects = raycaster.intersectObjects(this.scene.children);\n\n      // run click on all\n      //intersects.filter(inter => 'click' in inter.object).forEach(inter => inter.object.click());\n\n      // run click just on the foremost \n      if (intersects.length > 0) {\n        if (intersects[0].object.click) {\n          intersects[0].object.click();\n        }\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div ref={ref => this.ref = ref}></div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}