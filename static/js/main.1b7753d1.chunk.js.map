{"version":3,"sources":["App.js","index.js"],"names":["randBetween","min","max","Math","floor","random","randColour","r","g","b","THREE","App","props","ref","React","createRef","numCubes","animations","color","this","geometry","material","opacity","side","transparent","cube","factor","shouldInit","click","scene","add","push","rotation","x","abs","y","position","z","camera","window","innerWidth","innerHeight","renderer","setSize","appendChild","domElement","hLight","dLight","set","target","addCube","animate","forEach","anim","render","requestAnimationFrame","raycaster","mouse","addEventListener","event","preventDefault","clientX","clientWidth","clientY","clientHeight","setFromCamera","intersects","intersectObjects","children","length","object","PureComponent","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.1b7753d1.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport * as THREE from \"three\";\nimport './App.css';\n\nconst randBetween = (min, max) => {\n  return Math.floor(Math.random() * (max + 1 - min)) + min;\n}\n\nconst randColour = () => {\n  const r = randBetween(50, 200);\n  const g = randBetween(50, 200);\n  const b = randBetween(50, 200);\n  return new THREE.Color(`rgb(${r}, ${g}, ${b})`);\n}\n\nclass App extends PureComponent {\n\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n    this.numCubes = 0;\n    this.animations = [];\n  }\n\n  addCube(color) {\n    this.numCubes++;\n\n    // Cube shape\n    //const geometry = new THREE.SphereGeometry(0.5, 30, 30, 0, Math.PI * 2, 0, Math.PI * 2);\n    const geometry = new THREE.BoxGeometry();\n\n    // Colour\n    const material = new THREE.MeshPhongMaterial({\n      color: new THREE.Color(color || randColour()),\n      opacity: 0.8,\n      side: THREE.DoubleSide,\n      transparent: true\n    });\n\n    // Start off at a random rotation and position\n    const cube = new THREE.Mesh(geometry, material);\n    // Trigger initialisation\n    cube.factor = Math.random() * 0.04 + 0.01;\n    cube.shouldInit = true;\n\n    cube.click = () => {\n      //cube.shouldInit = true;\n      //const color = material.color;\n      //material.color = new THREE.Color(`rgb(${color.r + 10},${color.g + 10},${color.b + 10})`);\n      //cube.geometry = new THREE.SphereGeometry(0.5, 15, 15);\n      //material.transparent = false;\n      //material.opacity = 1;\n      //material.side = THREE.FrontSide;\n      cube.factor = 0 - cube.factor;\n    };\n\n    this.scene.add(cube);\n\n    // Animate the cube\n    const animate = () => {\n      // Rotate\n      cube.rotation.x -= 0.01 + Math.abs(cube.factor) / 4;\n      cube.rotation.y += 0.01 + Math.abs(cube.factor) / 4;\n      // Drift away from camera\n      cube.position.z -= cube.factor;\n\n      if (cube.position.z < -25) {\n        // init when cubes get too far away\n        cube.shouldInit = true;\n      }\n\n      if (cube.factor < 0 && cube.position.z > 5) {\n        // reverse direction if cube is coming towards us and gets too close\n        cube.factor = 0 - cube.factor;\n      }\n\n      if (cube.shouldInit) {\n        cube.position.x = randBetween(-5, 5) + Math.random();\n        cube.position.y = randBetween(-5, 5) + Math.random();\n        cube.position.z = randBetween(5, 20);\n        cube.rotation.x = Math.random();\n        cube.rotation.y = Math.random();\n        cube.shouldInit = false;\n      }\n    };\n    // Push to animation queue\n    this.animations.push(animate);\n  }\n\n  componentDidMount() {\n    // Create basic scene\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(window.innerWidth - 10, window.innerHeight - 10);\n    this.ref.appendChild(this.renderer.domElement);\n\n    // Add lighting\n    const skyColor = 0xFFFFFF;\n    const groundColour = 0x000000;\n    const intensity = 1;\n    const hLight = new THREE.HemisphereLight(skyColor, groundColour, intensity);\n    this.scene.add(hLight);\n\n    const color = 0xFFFFFF;\n    const dLight = new THREE.DirectionalLight(color, intensity);\n    dLight.position.set(0, 10, 0);\n    dLight.target.position.set(-5, 0, 0);\n    this.scene.add(dLight);\n    this.scene.add(dLight.target);\n    this.camera.position.z = 7;\n\n    // Maybe animate light here?\n\n    // Render some cubes\n    let numCubes = 50;\n    while (numCubes--) {\n      this.addCube();\n    }\n\n    // Start animating and rendering.\n    const animate = () => {\n      this.animations.forEach(anim => anim());\n      // Now there's only 1 render no matter how many things are being animated\n      this.renderer.render(this.scene, this.camera);\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Start listening for clicks\n    const raycaster = new THREE.Raycaster();\n    const mouse = new THREE.Vector2();\n\n    this.ref.addEventListener('mousedown', (event) => {\n\n      event.preventDefault();\n\n      mouse.x = (event.clientX / this.renderer.domElement.clientWidth) * 2 - 1;\n      mouse.y = - (event.clientY / this.renderer.domElement.clientHeight) * 2 + 1;\n\n      raycaster.setFromCamera(mouse, this.camera);\n\n      const intersects = raycaster.intersectObjects(this.scene.children);\n\n      // run click on all\n      //intersects.filter(inter => 'click' in inter.object).forEach(inter => inter.object.click());\n\n      // run click just on the foremost \n      if (intersects.length > 0) {\n        if (intersects[0].object.click) {\n          intersects[0].object.click();\n        }\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div ref={ref => this.ref = ref}></div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}